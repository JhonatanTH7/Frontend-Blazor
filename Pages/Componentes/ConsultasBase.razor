@using Services

@using FrontBlazor.Pages.Componentes

<!--  Importa el espacio de nombres donde se encuentra el ServicioEntidad-->
@inject ServicioEntidad servicioEntidad

<PageTitle>@Titulo</PageTitle>

<h1>@Titulo</h1>


<div class="mb-3 d-flex gap-2 justify-content-between align-items-center">
    <div class="head-left-side d-flex gap-2">
        <button class="btn btn-primary" @onclick="CargarIndicadores">Listar</button>
        <button class="btn btn-primary" @onclick="() => CargarIndicadoresPorNombre()">Consultar</button>
        <input type="text" class="form-control" id="iptConsultar" placeholder="Nombre Indicador"
            @bind="nombreConsulta" />
    </div>
    <span style="font-size: small; width: 35%;">
       <strong>Enunciado : </strong> @Enunciado 
    </span>
</div>

@if (Cargando)
{
    <p><em>Cargando...</em></p>
}
else
{

    @if (CargarTabla && indicadores != null && indicadores.Count > 0)
    {
        <div class="table-responsive tableContainer ">
            <table class="table table-striped text-center">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Codigo</th>
                        <th>Nombre</th>
                        <th>Objetivo</th>
                        <th>Alcance</th>
                        <th>Formula</th>
                        <th>Meta</th>
                        @if(BoolRepresen) {<th>Represenvisuales</th>}
                        @if(BoolRespon) {<th>Responsables</th>}
                        @if(BoolFuen) {<th>Fuentes</th>}
                        @if(BoolVari) {<th>Variables</th>}
                    </tr>
                </thead>
                <tbody>
                    @foreach (var indicador in indicadores)
                    {
                        var id = ObtenerValor(indicador, "id");
                        var codigo = ObtenerValor(indicador, "codigo");
                        var nombre = ObtenerValor(indicador, "nombre");
                        var objetivo = ObtenerValor(indicador, "objetivo");
                        var alcance = ObtenerValor(indicador, "alcance");
                        var formula = ObtenerValor(indicador, "formula");
                        var meta = ObtenerValor(indicador, "meta");
                        <tr>
                            <td>@id</td>
                            <td>@codigo</td>
                            <td>@nombre</td>
                            <td>@objetivo</td>
                            <td>@alcance</td>
                            <td>@formula</td>
                            <td>@meta</td>
                            @if(BoolRepresen)
                            {
                                <td>
                                    <ModalVer TItem="Dictionary<string, object>" 
                                        Items="listaporindicador"
                                        CampoPrimario="nombre"
                                        Titulo="@($"Represenvisuales del indicador: {nombre}")"
                                        OnVerClick="() => CargarRepresenvisualporindicador(id)" 
                                        IdModal="@($"Represen{id}{nombre.Replace(" ","")}Modal")"/>                                
                                </td>
                            }
                            @if(BoolRespon){
                                <td>
                                    <ModalVer TItem="Dictionary<string, object>" 
                                        Items="listaporindicador"
                                        CampoPrimario="nombre"
                                        Titulo="@($"Responsables del indicador: {nombre}")"
                                        OnVerClick="() => CargarResponsablesporindicador(id)" 
                                        IdModal="@($"Responsable{id}{nombre.Replace(" ","")}Modal")"/>
                                </td>
                            }
                            @if(BoolFuen){
                                <td>
                                    <ModalVer TItem="Dictionary<string, object>" 
                                        Items="listaporindicador"
                                        CampoPrimario="nombre"
                                        Titulo="@($"Fuentes del indicador: {nombre}")"
                                        OnVerClick="() => CargarFuentesporindicador(id)" 
                                        IdModal="@($"Fuente{id}{nombre.Replace(" ","")}Modal")"/>
                                </td>
                            }
                            @if(BoolVari){
                                <td>
                                    <ModalVer TItem="Dictionary<string, object>" 
                                        Items="listaporindicador"
                                        CampoPrimario="nombre"
                                        CampoSecundario="dato"
                                        CampoTerciario="fechadato"
                                        Titulo="@($"Variables del indicador: {nombre}")"
                                        OnVerClick="() => CargarVariablesporindicador(id)" 
                                        IdModal="@($"Variable{id}{nombre.Replace(" ","")}Modal")"/>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if ((indicadores == null || indicadores.Count == 0) && CargarTabla)
    {
        <p>No hay resultados de indicadores disponibles.</p>
    }

}

<!-- Mostrar mensaje de error si existe -->
@if (mensaje != null)
{
    <div class="alert" id="mensajeContainer">
        @mensaje
    </div>
}

<style>
    #mensajeContainer {
        position: fixed !important;
        top: 13%;
        right: 35%;
        z-index: 9999;
        transition: opacity 0.5s ease-in-out;
        background-color: rgba(255, 115, 0, 0.55);
    }
</style>

@code {
    private List<Dictionary<string, object>> indicadores = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> listaporindicador = new List<Dictionary<string, object>>();
    
    private const string PROYECTO = "proyecto";
    private const string TABLA = "indicador";
    private string nombreConsulta = string.Empty;
    private bool Cargando = true;
    private bool CargarTabla = false;
    private string? mensaje = null;

    [Parameter]
    public string Titulo { get; set; } = string.Empty;
    [Parameter]
    public string Enunciado { get; set; } = string.Empty;
    [Parameter]
    public bool BoolRepresen { get; set; } = false;
    [Parameter]
    public bool BoolRespon { get; set; } = false;
    [Parameter]
    public bool BoolFuen { get; set; } = false;
    [Parameter]
    public bool BoolVari { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarIndicadores();
    }

    private async Task CargarIndicadores()
    {
        Cargando = true;
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { {"consulta", "SELECT i.id, i.nombre, i.codigo, i.objetivo, i.alcance, i.formula, i.meta FROM dbo.indicador i;" } });
            if (resultado != null)
            {
                indicadores = resultado;
            }
            else
            {
                indicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar indicadores: {ex.Message}");
            MostrarMensaje("Error al cargar indicadores. Por favor, inténtelo de nuevo más tarde.");
        }
        finally
        {
            Cargando = false;
            CargarTabla = true;
        }
    }

    private async Task CargarIndicadoresPorNombre()
    {
        Cargando = true;
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT i.id, i.nombre, i.codigo, i.objetivo, i.alcance, i.formula, i.meta FROM dbo.indicador i WHERE i.nombre LIKE '%{nombreConsulta}%'" } });
            if (resultado != null)
            {
                indicadores = resultado;
                nombreConsulta = string.Empty;
            }
            else
            {
                indicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar indicadores por nombre: {ex.Message}");
            MostrarMensaje("Error al cargar indicadores por nombre. Por favor, inténtelo de nuevo más tarde.");
        }
        finally
        {
            Cargando = false;
            CargarTabla = true;
        }
    }

    private async Task CargarRepresenvisualporindicador(string id)
    {
        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT rv.id AS fkidrepresenvisual, rv.nombre FROM dbo.represenvisualporindicador rvpi INNER JOIN dbo.represenvisual rv ON rv.id = rvpi.fkidrepresenvisual  WHERE rvpi.fkidindicador = {id}" } });
            if (resultado != null)
            {
                listaporindicador = resultado;   
            }
            else
            {
                listaporindicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar Represenvisualporindicador: {ex.Message}");
            MostrarMensaje("Error al cargar Represenvisualporindicador");
        }
    }

    private async Task CargarResponsablesporindicador(string id)
    {
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT dbo.actor.id AS fkidresponsable, dbo.actor.nombre FROM dbo.actor INNER JOIN dbo.responsablesporindicador ON dbo.actor.id = dbo.responsablesporindicador.fkidresponsable WHERE dbo.responsablesporindicador.fkidindicador = {id}" } });
            if (resultado != null)
            {
                listaporindicador = resultado;
            }
            else
            {
                listaporindicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar Responsablesporindicador: {ex.Message}");
            MostrarMensaje("Error al cargar Responsablesporindicador");
        }
    }

    private async Task CargarFuentesporindicador(string id)
    {
        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT dbo.fuente.id AS fkidfuente, dbo.fuente.nombre FROM dbo.fuente INNER JOIN dbo.fuentesporindicador ON dbo.fuente.id = dbo.fuentesporindicador.fkidfuente WHERE dbo.fuentesporindicador.fkidindicador = {id}" } });
            if (resultado != null)
            {
                listaporindicador = resultado;
            }
            else
            {
                listaporindicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar Fuentesporindicador: {ex.Message}");
            MostrarMensaje("Error al cargar Fuentesporindicador");
        }
    }

    private async Task CargarVariablesporindicador(string id)
    {
        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT dbo.variable.id AS fkidvariable, dbo.variable.nombre, dbo.variablesporindicador.dato, dbo.variablesporindicador.fechadato FROM dbo.variable INNER JOIN dbo.variablesporindicador ON dbo.variable.id = dbo.variablesporindicador.fkidvariable WHERE dbo.variablesporindicador.fkidindicador = {id}" } });
            if (resultado != null)
            {
                listaporindicador = resultado;
            }
            else
            {
                listaporindicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar Variablesporindicador: {ex.Message}");
            MostrarMensaje("Error al cargar Variablesporindicador");
        }
    }

    private void MostrarMensaje(string mensaje)
    {
        this.mensaje = mensaje;
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            this.mensaje = null;
            await InvokeAsync(StateHasChanged);
        });
        StateHasChanged();
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {

        if (diccionario == null)
            return string.Empty;

        if (diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }

        return string.Empty;
    }
}
