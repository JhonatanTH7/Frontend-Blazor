<!--  Define la ruta URL para acceder a esta página -->
@page "/seccion"

<!--  Importa el espacio de nombres para trabajar con JSON -->
@using Services

<!--  Importa el espacio de nombres donde se encuentra el ServicioEntidad-->
@inject ServicioEntidad servicioEntidad

<PageTitle>Seccion</PageTitle>

<h1>Seccion</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ManejarClickListar">Listar</button>
    <button class="btn btn-primary" @onclick="ManejarClickConsultar">Consultar</button>
    <button class="btn btn-success" @onclick="ManejarClickCrear">Crear</button>
    <button class="btn btn-warning">Actualizar</button>
    <button class="btn btn-danger">Eliminar</button>
</div>


@if (Cargando)
{
    <p><em>Cargando...</em></p>
}
else
{
    @if (VisFormCrear)
    {
        <EditForm Model="@formulario" OnValidSubmit="Crear">
            <div class="mb-3">
                <label for="idCrear">Código:</label>
                <input type="number" class="form-control" @bind="formulario.Codigo" id="idCrear" />
            </div>

            <div class="mb-3">
                <label for="nombreCrear">Nombre:</label>
                <input type="text" class="form-control" @bind="formulario.Nombre" id="nombreCrear" />
            </div>

            <button type="submit" class="btn btn-primary">Enviar</button>
        </EditForm>
    }

    @if (VisFormConsultar)
    {
        <EditForm Model="@formulario" OnValidSubmit="Consultar">
            <div class="mb-3">
                <label for="idConsultar">Código:</label>
                <input type="number" class="form-control" @bind="formulario.Codigo" id="idConsultar" />
            </div>

            <button type="submit" class="btn btn-primary">Enviar</button>
        </EditForm>
    }

    @if (CargarTabla && secciones != null && secciones.Count > 0)
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Nombre</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var seccion in secciones)
                    {
                        <tr>
                            <td>@ObtenerValor(seccion, "id")</td>
                            <td>@ObtenerValor(seccion, "nombre")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if ((secciones == null || secciones.Count == 0) && CargarTabla)
    {
        <p>No hay secciones disponibles.</p>
    }


}

<!-- Mostrar mensaje de error si existe -->
@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}


@code {

    // Lista para almacenar los productos que se obtienen de la API
    private List<Dictionary<string, object>> secciones = new List<Dictionary<string, object>>();

    private FormularioSeccion formulario = new FormularioSeccion();

    // Variable para almacenar mensajes de error
    private string? errorMensaje = null;

    // Constantes para los parámetros de la API
    private const string PROYECTO = "proyecto";

    private const string TABLA = "seccion";


    // Variables visibilidad
    private bool Cargando = true;
    private bool CargarTabla = false;
    private bool VisFormCrear = false;
    private bool VisFormConsultar = false;


    protected override async Task OnInitializedAsync()
    {
        await CargarSecciones();
    }


    private class FormularioSeccion
    {
        public string Codigo { get; set; } = "";
        public string Nombre { get; set; } = "";
    }

    private void Crear()
    {
        Console.WriteLine($"Código: {formulario.Codigo}, Nombre: {formulario.Nombre}");
    }

    private void Consultar()
    {
        Console.WriteLine($"Código: {formulario.Codigo}");
    }

    private async Task ManejarClickListar()
    {
        formulario = new FormularioSeccion();
        CargarTabla = true;
        VisFormConsultar = false;
        VisFormCrear = false;
        await CargarSecciones();
    }

    private void ManejarClickCrear()
    {
        formulario = new FormularioSeccion();
        VisFormCrear = true;
        VisFormConsultar = false;
        CargarTabla = false;
    }


    private void ManejarClickConsultar()
    {
        VisFormConsultar = true;
        VisFormCrear = false;
        CargarTabla = false;
    }


    private async Task CargarSecciones()
    {
        Cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            if (resultado != null)
            {
                secciones = resultado;
            }
            else
            {
                secciones = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar secciones: {ex.Message}";
            secciones = new List<Dictionary<string, object>>();
        }
        finally
        {
            CargarTabla = true;
            Cargando = false;
        }
    }

    private async Task CargarSeccionPorClave()
    {
        Cargando = true;

        errorMensaje = null;

        VisFormConsultar = true;

        try
        {

            var resultado = await servicioEntidad.ObtenerPorClaveAsync(PROYECTO, TABLA, "id", "0");

            if (resultado != null)
            {
                secciones = new List<Dictionary<string, object>>() { resultado };
            }
            else
            {

                secciones = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {

            errorMensaje = $"Error al cargar seccion: {ex.Message}";
            secciones = new List<Dictionary<string, object>>();
        }
        finally
        {
            Cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {

        if (diccionario == null)
            return string.Empty;

        if (diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }

        return string.Empty;
    }

}