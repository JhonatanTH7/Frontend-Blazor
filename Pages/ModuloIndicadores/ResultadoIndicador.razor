<!--  Define la ruta URL para acceder a esta página -->
@page "/resultadoindicador"

<!--  Importa el espacio de nombres para trabajar con JSON -->
@using Services

@using FrontBlazor.Pages.Componentes

<!--  Importa el espacio de nombres donde se encuentra el ServicioEntidad-->
@inject ServicioEntidad servicioEntidad

<!-- Uso de JS -->
@inject IJSRuntime JS


<PageTitle>Resultadoindicador</PageTitle>

<h1>ResultadoIndicador</h1>

<div class="mb-3 d-flex gap-2 justify-content-between align-items-center">

    <div class="head-left-side d-flex gap-2">
        <button class="btn btn-primary" @onclick="ManejarClickListar">Listar</button>
        <button class="btn btn-primary" @onclick="() => CargarResultadosPorNombreIndicador()">Consultar</button>
        <input type="text" class="form-control" id="iptConsultar" placeholder="ConsultarxIndicador / Nombre"
            @bind="nombreConsulta" />
    </div>

    <div class="head-right-side">
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#crearModal" @onclick="ManejarClickCrear">Crear</button>

        <div class="modal fade" id="crearModal" tabindex="-1" aria-labelledby="crearModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="crearModalLabel">Crear Resultado de Indicador</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                            <div class="mb-3">
                                <label for="iptResultado">Ingrese el resultado: </label>
                                <input type="number" placeholder="12.9" class="form-control" id="iptResultado" @bind="@formularioResultadoIndicador.resultado"/>
                            </div>

                            <div class="mb-3">
                                <label for="iptFechaCalculo">Ingrese la fecha de cálculo: </label>
                                <input type="date" class="form-control" id="iptFechaCalculo" @bind="@formularioResultadoIndicador.fechacalculo"/>
                            </div>

                            <div class="mb-3">
                                <label for="sltIndicador">Seleccione el Indicador: </label>
                                <select name="sltIndicador" id="sltIndicador" class="form-select" @bind="@formularioResultadoIndicador.fkidindicador">
                                    @if (indicadores != null && indicadores.Count > 0)
                                    {
                                        <option value="" disabled selected>Seleccione indicador</option>
                                        foreach (var ind in indicadores)
                                        {
                                            var id = ObtenerValor(ind, "id");
                                            <option value="@id">Id: @id  -  Nombre: @ObtenerValor(ind, "nombre")</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="" disabled selected>No hay tipos de actores disponibles</option>
                                    }
                                </select>
                            </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                            @onclick="(() => formularioResultadoIndicador = new FormularioResultadoIndicador())">Cerrar</button>
                        <button type="button" class="btn btn-success" @onclick="CrearResultadoIndicador">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@if (Cargando)
{
    <p><em>Cargando...</em></p>
}
else
{

    @if (CargarTabla && resultadosindicadores != null && resultadosindicadores.Count > 0)
    {
        <div class="table-responsive tableContainer">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Nombre Indicador</th>
                        <th>Resultado</th>
                        <th>Fecha de calculo</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var resu in resultadosindicadores)
                    {
                        var id = ObtenerValor(resu, "id");
                        var resultado = ObtenerValor(resu, "resultado");
                        var fechacalculo = ObtenerValor(resu, "fechacalculo");
                        var fkidindicador = ObtenerValor(resu, "fkidindicador");
                        var nombreindicador = ObtenerValor(resu, "nombreindicador");
                        <tr>
                            <td>@id</td>
                            <td>@nombreindicador</td>
                            <td>@resultado</td>
                            <td>@fechacalculo</td>
                            <td>
                                <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="@($"#{id}ActualizarModal")"
                                    @onclick="@(async () => {
                                    formularioResultadoIndicador = new FormularioResultadoIndicador
                                    {
                                        id = id,
                                        resultado = double.TryParse(resultado, out var res) ? res : 0,
                                        fechacalculo = DateTime.TryParse(fechacalculo, out var fecha) ? fecha : DateTime.Now,
                                        fkidindicador = fkidindicador
                                    };
                                    await Task.CompletedTask;
                                })">
                                    Editar
                                </button>
                                <div class="modal fade" id="@($"{id}ActualizarModal")" tabindex="-1" aria-labelledby="@($"{id}ActualizarModalLabel")"
                                    aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="@($"{id}ActualizarModalLabel")">
                                                    Actualizando Resultado de indicador: @id
                                                </h1>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                    aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                    <div class="mb-3">
                                                        <label for="@($"iptResultado{id}")">Ingrese el resultado: </label>
                                                        <input type="number" placeholder="12.9" class="form-control"
                                                            id="@($"iptResultado{id}")" @bind="@formularioResultadoIndicador.resultado"/>
                                                    </div>

                                                    <div class="mb-3">
                                                        <label for="@($"iptFechaCalculo{id}")">Ingrese la fecha de cálculo: </label>
                                                        <input type="date" class="form-control"
                                                            id="@($"iptFechaCalculo{id}")" @bind="@formularioResultadoIndicador.fechacalculo"/>
                                                    </div>

                                                    <div class="mb-3">
                                                        <label for="@($"sltIndicador{id}")">Seleccione el Indicador: </label>
                                                        <select name="@($"sltIndicador{id}")" id="@($"sltIndicador{id}")"
                                                            class="form-select" @bind="@formularioResultadoIndicador.fkidindicador">
                                                            @if (indicadores != null && indicadores.Count > 0)
                                                            {
                                                                <option value="" disabled selected>Seleccione indicador</option>
                                                                @foreach (var ind in indicadores)
                                                                {
                                                                    var idInd = ObtenerValor(ind, "id");
                                                                    <option value="@idInd">Id: @idInd - Nombre: @ObtenerValor(ind, "nombre")</option>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <option value="" disabled selected>No hay tipos de actores disponibles</option>
                                                            }
                                                        </select>
                                                    </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                                                    @onclick="(() => formularioResultadoIndicador = new FormularioResultadoIndicador())">Cerrar</button>
                                                <button type="button" class="btn btn-success" @onclick="ActualizarResultadoIndicador">Guardar</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button class="btn btn-danger"  @onclick="@( () =>  ManejarClickEliminar(id))" >Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if ((resultadosindicadores == null || resultadosindicadores.Count == 0) && CargarTabla)
    {
        <p>No hay resultados de indicadores disponibles.</p>
    }

}

<!-- Mostrar mensaje de error si existe -->
@if (mensaje != null)
{
    <div class="alert" id="mensajeContainer">
        @mensaje
    </div>
}

<style>
    #mensajeContainer {
        position: fixed !important;
        top: 13%;
        right: 35%;
        z-index: 9999;
        transition: opacity 0.5s ease-in-out;
        background-color: rgba(255, 115, 0, 0.55);
    }
</style>


@code {

    private List<Dictionary<string, object>> resultadosindicadores = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> indicadores = new List<Dictionary<string, object>>();

    // Variable para almacenar mensajes de error
    private string? mensaje = null;

    // Constantes para los parámetros de la API
    private const string PROYECTO = "proyecto";
    private const string TABLA = "resultadoindicador";

    // Variable para almacenar el nombre a consultar
    private string nombreConsulta = string.Empty;

    // Variables visibilidad
    private bool Cargando = true;
    private bool CargarTabla = false;

    FormularioResultadoIndicador formularioResultadoIndicador = new FormularioResultadoIndicador();

    protected override async Task OnInitializedAsync()
    {
        await CargarResultadosIndicadores();
        await CargarIndicadores();
    }

    private class FormularioResultadoIndicador
    {
        public string id { get; set; } = string.Empty;
        public double resultado { get; set; }
        public DateTime fechacalculo { get; set; } = DateTime.Now;
        public string fkidindicador { get; set; } = string.Empty;
    }

    private async void ManejarClickListar()
    {
        await CargarResultadosIndicadores();
        StateHasChanged();
    }

    private async void ManejarClickCrear()
    {
        formularioResultadoIndicador = new FormularioResultadoIndicador();
        await CargarIndicadores();
        StateHasChanged();
    }

    private async void ManejarClickEliminar(string id)
    {
        mensaje = null;
        var confirmar = await JS.InvokeAsync<bool>("confirm", "¿Está seguro de que desea eliminar este Actor?");
        if (!confirmar)
        {
            return;
        }
        await EliminarResultadoIndicador(id);
    }

    private async Task CargarResultadosIndicadores()
    {
        Cargando = true;
        CargarTabla = false;
        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object>
            {
                { "consulta", "SELECT ri.id AS id, ri.resultado, ri.fechacalculo, ri.fkidindicador, i.nombre AS nombreindicador FROM resultadoindicador ri INNER JOIN indicador i ON ri.fkidindicador = i.id" }
            });
            if (resultado != null)
            {
                resultadosindicadores = resultado;
            }
            else
            {
                resultadosindicadores = new List<Dictionary<string, object>>();
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los resultados de indicadores: {ex.Message}");
            MostrarMensaje("Error al cargar los resultados de indicadores");
        }
        finally
        {
            Cargando = false;
            CargarTabla = true;
        }
    }

    private async Task CargarIndicadores()
    {
        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, "indicador", new Dictionary<string, object>
            {
                { "consulta", "SELECT id, nombre FROM indicador" }
            });

            if (resultado != null)
            {
                indicadores = resultado;
            }
            else
            {
                indicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los indicadores: {ex.Message}");
            MostrarMensaje("Error al cargar los indicadores");
        }
    }

    private async Task CargarResultadosPorNombreIndicador()
    {
        try{
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object>
            {
                { "consulta", $"SELECT ri.id AS id, ri.resultado, ri.fechacalculo, ri.fkidindicador, i.nombre AS nombreindicador FROM resultadoindicador ri INNER JOIN indicador i ON ri.fkidindicador = i.id WHERE i.nombre LIKE '%{nombreConsulta}%'" }
            });

            if (resultado != null)
            {
                resultadosindicadores = resultado;
            }
            else
            {
                resultadosindicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los resultados por nombre de indicador: {ex.Message}");
            MostrarMensaje("Error al cargar los resultados por nombre de indicador");
        }
        finally
        {
            Cargando = false;
            CargarTabla = true;
        }
    }

    private async Task CrearResultadoIndicador()
    {

        if(string.IsNullOrEmpty(formularioResultadoIndicador.resultado.ToString()))
        {
            MostrarMensaje("Debe ingresar un resultado.");
            return;
        }

        if (string.IsNullOrEmpty(formularioResultadoIndicador.fechacalculo.ToString()))
        {
            MostrarMensaje("Debe ingresar una fecha de cálculo.");
            return;
        }

        if (string.IsNullOrEmpty(formularioResultadoIndicador.fkidindicador))
        {
            MostrarMensaje("Debe seleccionar un indicador.");
            return;
        }

        try
        {
            var resultado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, new Dictionary<string, object>
            {
                { "resultado", formularioResultadoIndicador.resultado },
                { "fechacalculo", formularioResultadoIndicador.fechacalculo },
                { "fkidindicador", formularioResultadoIndicador.fkidindicador }
            });

            if (resultado)
            {
                MostrarMensaje("Resultado de indicador creado exitosamente.");
                await CargarResultadosIndicadores();
            }
            else
            {
                MostrarMensaje("Error al crear el resultado de indicador.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear el resultado de indicador: {ex.Message}");
            MostrarMensaje("Error al crear el resultado de indicador.");
        }
        finally{
                await CerrarModal("crearModal");
        }
    }

    private async Task ActualizarResultadoIndicador()
    {
        try
        {
            if (string.IsNullOrEmpty(formularioResultadoIndicador.resultado.ToString()))
            {
                MostrarMensaje("Debe ingresar un resultado.");
                return;
            }

            if(string.IsNullOrEmpty(formularioResultadoIndicador.fechacalculo.ToString()))
            {
                MostrarMensaje("Debe ingresar una fecha de cálculo.");
                return;
            }

            if (string.IsNullOrEmpty(formularioResultadoIndicador.fkidindicador))
            {
                MostrarMensaje("Debe seleccionar un indicador.");
                return;
            }

            var resultado = await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "id", formularioResultadoIndicador.id, new Dictionary<string, object>
            {
                { "resultado", formularioResultadoIndicador.resultado },
                { "fechacalculo", formularioResultadoIndicador.fechacalculo },
                { "fkidindicador", formularioResultadoIndicador.fkidindicador }
            });

            if (resultado)
            {
                MostrarMensaje("Resultado de indicador actualizado exitosamente.");
                await CargarResultadosIndicadores();
            }
            else
            {
                MostrarMensaje("Error al actualizar el resultado de indicador.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar el resultado de indicador: {ex.Message}");
            MostrarMensaje("Error al actualizar el resultado de indicador.");
        }
        finally
        {
            await CerrarModal($"{formularioResultadoIndicador.id}ActualizarModal");
        }
    }

    private async Task EliminarResultadoIndicador(string id)
    {
        try
        {
            var resultado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
            if (resultado)
            {
                await CargarResultadosIndicadores();
                MostrarMensaje("Resultado de indicador eliminado exitosamente.");
            }
            else
            {
                MostrarMensaje("Error al eliminar el resultado de indicador.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el resultado de indicador: {ex.Message}");
            MostrarMensaje("Error al eliminar el resultado de indicador.");
        }
    }

    private async Task CerrarModal(string idModal)
    {
        await JS.InvokeVoidAsync("cerrarModalPorId", idModal);
    }

    private void MostrarMensaje(string mensaje)
    {
        this.mensaje = mensaje;
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            this.mensaje = null;
            await InvokeAsync(StateHasChanged);
        });
        StateHasChanged();
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {

        if (diccionario == null)
            return string.Empty;

        if (diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }

        return string.Empty;
    }
}