<!--  Define la ruta URL para acceder a esta página -->
@page "/indicador"
@inherits FrontBlazor.Services.ValidacionAcceso
<!--  Importa el espacio de nombres para trabajar con JSON -->
@using Services

@using FrontBlazor.Pages.Componentes

<!--  Importa el espacio de nombres donde se encuentra el ServicioEntidad-->
@inject ServicioEntidad servicioEntidad


@inject IJSRuntime JS

<PageTitle>Indicador</PageTitle>

<h1>Indicador</h1>



<div class="mb-3 d-flex gap-2 justify-content-between align-items-center">

    <div class="head-left-side d-flex gap-2">
        <button class="btn btn-primary" @onclick="ManejarClickListar">Listar</button>
        <button class="btn btn-primary" @onclick="() => CargarIndicadoresPorNombre(nombreConsulta)">Consultar</button>
        <input type="text" class="form-control" id="iptConsultar" placeholder="Consultar Indicador/Nombre"
            @bind="nombreConsulta" />
    </div>

    <div>
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#crearModal1" @onclick="ManejarClickCrear" >Crear</button>
        <div class="modal fade" id="crearModal1" aria-hidden="true" aria-labelledby="crearModal1Label" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="crearModal1Label">Agregando Indicador: Pg. 1</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="iptCodigo" class="form-label">Codigo</label>
                            <input type="text" class="form-control" id="iptCodigo" placeholder="COD 000"
                                @bind="@formularioIndicador.codigo" />
                        </div>
                        <div class="mb-3">
                            <label for="iptNombre" class="form-label">Nombre</label>
                            <input type="text" class="form-control" id="iptNombre" placeholder="NPM 000"
                                @bind="@formularioIndicador.nombre" />
                        </div>
                        <div class="mb-3">
                            <label for="iptObjetivo" class="form-label">Objetivo</label>
                            <input type="text" class="form-control" id="iptObjetivo" placeholder="Objetivo"
                                @bind="@formularioIndicador.objetivo" />
                        </div>
                        <div class="mb-3">
                            <label for="iptAlcance" class="form-label">Alcance</label>
                            <input type="text" class="form-control" id="iptAlcance" placeholder="Alcance"
                                @bind="@formularioIndicador.alcance" />
                        </div>
                        <div class="mb-3">
                            <label for="iptFormula" class="form-label">Formula</label>
                            <input type="text" class="form-control" id="iptFormula" placeholder="Formula"
                                @bind="@formularioIndicador.formula" />
                        </div>
                        <div class="mb-3">
                            <label for="iptMeta" class="form-label">Meta</label>
                            <input type="text" class="form-control" id="iptMeta" placeholder="Meta"
                                @bind="@formularioIndicador.meta" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-target="#crearModal2" data-bs-toggle="modal">Siguiente</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="crearModal2" aria-hidden="true" aria-labelledby="crearModal2Label" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="crearModal2Label">Agregando Indicador: Pg. 2</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="sltTipoActor">Seleccione el Tipo de Indicador: </label>
                            <select name="sltTipoActor" id="sltTipoActor" class="form-select" @bind="@formularioIndicador.fkidtipoindicador">
                                @if (tiposIndicador != null && tiposIndicador.Count > 0)
                                {
                                    <option value="" disabled selected>Seleccione un Tipo de Indicador</option>
                                    foreach (var tipo in tiposIndicador)
                                    {
                                        var idTipo = ObtenerValor(tipo, "id");
                                        var nombreTipo = ObtenerValor(tipo, "nombre");
                                        <option value="@idTipo">@nombreTipo</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay tipos de indicadores disponibles</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="sltUnidadMedicion">Seleccione la Unidad de Medición: </label>
                            <select name="sltUnidadMedicion" id="sltUnidadMedicion" class="form-select" @bind="@formularioIndicador.fkidunidadmedicion">
                                @if (unidadesMedicion != null && unidadesMedicion.Count > 0)
                                {
                                    <option value="" disabled selected>Seleccione una Unidad de Medición</option>
                                    foreach (var unidad in unidadesMedicion)
                                    {
                                        var idUnidad = ObtenerValor(unidad, "id");
                                        var descripcionUnidad = ObtenerValor(unidad, "descripcion");
                                        <option value="@idUnidad">@descripcionUnidad</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay Unidades de medicion disponibles</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="sltSentido">Seleccione el Sentido: </label>
                            <select name="sltSentido" id="sltSentido" class="form-select" @bind="@formularioIndicador.fkidsentido">
                                @if (sentidos != null && sentidos.Count > 0)
                                {
                                    <option value="" disabled selected>Seleccione un Sentido</option>
                                    foreach (var sentido in sentidos)
                                    {
                                        var idSentido = ObtenerValor(sentido, "id");
                                        var nombreSentido = ObtenerValor(sentido, "nombre");
                                        <option value="@idSentido">@nombreSentido</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay Sentidos disponibles</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="sltFrecuencia">Seleccione la Frecuencia: </label>
                            <select name="sltFrecuencia" id="sltFrecuencia" class="form-select" @bind="@formularioIndicador.fkidfrecuencia">
                                @if (frecuencias != null && frecuencias.Count > 0)
                                {
                                    <option value="" disabled selected>Seleccione una Frecuencia</option>
                                    foreach (var frecuencia in frecuencias)
                                    {
                                        var idFrecuencia = ObtenerValor(frecuencia, "id");
                                        var nombreFrecuencia = ObtenerValor(frecuencia, "nombre");
                                        <option value="@idFrecuencia">@nombreFrecuencia</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay frecuencias disponibles</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="sltArticulo">Seleccione el Articulo: </label>
                            <select name="sltArticulo" id="sltArticulo" class="form-select" @bind="@formularioIndicador.fkidarticulo">
                                @if (articulos != null && articulos.Count > 0)
                                {
                                    <option value="" disabled selected>Seleccione un Articulo</option>
                                    foreach (var articulo in articulos)
                                    {
                                        var idArticulo = ObtenerValor(articulo, "id");
                                        var nombreArticulo = ObtenerValor(articulo, "nombre");
                                        <option value="@idArticulo">@nombreArticulo</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay Articulos disponibles</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="sltLiteral">Seleccione el Literal: </label>
                            <select name="sltLiteral" id="sltLiteral" class="form-select" @bind="@formularioIndicador.fkidliteral">
                                @if (literales != null && literales.Count > 0)
                                {
                                    <option value="" disabled selected>Seleccione un Literal</option>
                                    foreach (var literal in literales)
                                    {
                                        var idLiteral = ObtenerValor(literal, "id");
                                        var descripcionLiteral = ObtenerValor(literal, "descripcion");
                                        <option value="@idLiteral">@descripcionLiteral</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay Literales disponibles</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="sltNumeral">Seleccione el Numeral: </label>
                            <select name="sltNumeral" id="sltNumeral" class="form-select" @bind="@formularioIndicador.fkidnumeral">
                                @if (numerales != null && numerales.Count > 0)
                                {
                                    <option value="" disabled selected>Seleccione un Numeral</option>
                                    foreach (var numeral in numerales)
                                    {
                                        var idNumeral = ObtenerValor(numeral, "id");
                                        var descripcionNumeral = ObtenerValor(numeral, "descripcion");
                                        <option value="@idNumeral">@descripcionNumeral</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay Numerales disponibles</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="sltParagrafo">Seleccione el Paragrafo: </label>
                            <select name="sltParagrafo" id="sltParagrafo" class="form-select" @bind="@formularioIndicador.fkidparagrafo">
                                @if (paragrafos != null && paragrafos.Count > 0)
                                {
                                    <option value="" disabled selected>Seleccione un Paragrafo</option>
                                    foreach (var paragrafo in paragrafos)
                                    {
                                        var idParagrafo = ObtenerValor(paragrafo, "id");
                                        var descripcionParagrafo = ObtenerValor(paragrafo, "descripcion");
                                        <option value="@idParagrafo">@descripcionParagrafo</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay Paragrafos disponibles</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-target="#crearModal1" data-bs-toggle="modal">Anterior</button>
                        <button class="btn btn-primary" data-bs-target="#crearModal3" data-bs-toggle="modal">Siguiente</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="crearModal3" aria-hidden="true" aria-labelledby="crearModal3Label" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="crearModal3Label">Agregando Indicador: Pg. 3</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <fieldset class="border p-2 mb-3">
                            <legend>Represenvisualporindicador</legend>
                            <div class="mb-3 d-flex gap-2 justify-content-center" >
                                <select name="sltRepresenvisualPorIndicador" id="sltRepresenvisualPorIndicador" class="form-select" @bind="@idRepresenIndicadorAgregar">
                                    <option value="">Seleccione una Representación</option>
                                    @foreach (var rep in represenvisual)
                                    {
                                        <option value="@ObtenerValor(rep, "id")">
                                            @ObtenerValor(rep, "nombre")
                                        </option>
                                    }
                                </select>
                                <div class="col-auto">
                                    <button type="button" class="btn btn-primary" @onclick="AgregarRepresenvisual">Agregar</button>
                                </div>
                            </div>
                            <ul class="list-group">
                                @foreach (var item in represenvisualporindicador)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @ObtenerValor(item,"fkidrepresenvisual") - Nombre: @ObtenerValor(item,"nombre")
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarElementoLista(item, represenvisualporindicador)">Remover</button>
                                    </li>
                                }
                            </ul>
                        </fieldset>
                        <fieldset class="border p-2 mb-3">
                            <legend>Responsablesporindicador</legend>
                            <div class="mb-3 d-flex gap-2 justify-content-center" >
                                <select name="sltResponsablesPorIndicador" id="sltResponsablesPorIndicador" class="form-select" @bind="@idResponsableAgregar">
                                    <option value="">Seleccione un Responsable</option>
                                    @foreach (var resp in responsables)
                                    {
                                        <option value="@ObtenerValor(resp, "id")">
                                            @ObtenerValor(resp, "nombre")
                                        </option>
                                    }
                                </select>
                                <div class="col-auto">
                                    <button type="button" class="btn btn-primary" @onclick="AgregarResponsable">Agregar</button>
                                </div>
                            </div>
                            <ul class="list-group">
                                @foreach (var item in responsablesporindicador)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @ObtenerValor(item,"fkidresponsable") - Nombre: @ObtenerValor(item,"nombre")
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarElementoLista(item,responsablesporindicador)">Remover</button>
                                    </li>
                                }
                            </ul>
                        </fieldset>
                        <fieldset class="border p-2 mb-3">
                            <legend>Fuentesporindicador</legend>
                            <div class="mb-3 d-flex gap-2 justify-content-center" >
                                <select name="sltFuentesPorIndicador" id="sltFuentesPorIndicador" class="form-select" @bind="@idFuenteAgregar">
                                    <option value="">Seleccione una Fuente</option>
                                    @foreach (var fuen in fuentes)
                                    {
                                        <option value="@ObtenerValor(fuen, "id")">
                                            @ObtenerValor(fuen, "nombre")
                                        </option>
                                    }
                                </select>
                                <div class="col-auto">
                                    <button type="button" class="btn btn-primary" @onclick="AgregarFuente">Agregar</button>
                                </div>
                            </div>
                            <ul class="list-group">
                                @foreach (var item in fuentesporindicador)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @ObtenerValor(item, "fkidfuente") - Nombre: @ObtenerValor(item, "nombre")
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarElementoLista(item,fuentesporindicador)">Remover</button>
                                    </li>
                                }
                            </ul>
                        </fieldset>
                        <fieldset class="border p-2 mb-3">
                            <legend>Variablesporindicador</legend>
                            <div class="mb-3 d-flex gap-2 justify-content-center" >
                                <div class="w-100 d-flex gap-2">
                                    <select name="sltVariablesPorIndicador" id="sltVariablesPorIndicador" class="form-select" @bind="@idVariableAgregar">
                                        <option value="">Seleccione una Variable</option>
                                        @foreach (var vari in variables)
                                        {
                                            <option value="@ObtenerValor(vari, "id")">
                                                @ObtenerValor(vari, "nombre")
                                            </option>
                                        }
                                    </select>
                                    <input type="number" placeholder="Dato" name="iptDatoCrearVariables" id="iptDatoCrearVariables" class="form-control" @bind="@datoVariableAgregar" />
                                </div>
                                <div class="col-auto">
                                    <button type="button" class="btn btn-primary" @onclick="AgregarVariable">Agregar</button>
                                </div>
                            </div>
                            <ul class="list-group">
                                @foreach (var item in variablesporindicador)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @ObtenerValor(item,"fkidvariable") - Nombre: @ObtenerValor(item,"nombre") = @ObtenerValor(item,"dato")
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarElementoLista(item,variablesporindicador)">Remover</button>
                                    </li>
                                }
                            </ul>
                        </fieldset>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" data-bs-target="#crearModal2" data-bs-toggle="modal">Anterior</button>
                        <button class="btn btn-primary" @onclick="CrearIndicador">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




@if (Cargando)
{
    <p><em>Cargando...</em></p>
}
else
{

    @if (CargarTabla && indicadores != null && indicadores.Count > 0)
    {
        <div class="table-responsive tableContainer">
            <table class="table table-striped text-center">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Codigo</th>
                        <th>Nombre</th>
                        <th>Objetivo</th>
                        <th>Alcance</th>
                        <th>Formula</th>
                        <th>Meta</th>
                        <th>Tipo Indicador</th>
                        <th>Unidad Medicion</th>
                        <th>Sentido</th>
                        <th>Frecuencia</th>
                        <th>Articulo</th>
                        <th>Literal</th>
                        <th>Numeral</th>
                        <th>Paragrafo</th>
                        <th>Represenvisualporindicador</th>
                        <th>Responsablesporindicador</th>
                        <th>Fuentesporindicador</th>
                        <th>Variablesporindicador</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var indicador in indicadores)
                    {
                        var id = ObtenerValor(indicador, "id");
                        var codigo = ObtenerValor(indicador, "codigo");
                        var nombre = ObtenerValor(indicador, "nombre");
                        var objetivo = ObtenerValor(indicador, "objetivo");
                        var alcance = ObtenerValor(indicador, "alcance");
                        var formula = ObtenerValor(indicador, "formula");
                        var meta = ObtenerValor(indicador, "meta");
                        var nombretipoindicador = ObtenerValor(indicador, "nombretipoindicador");
                        var descripcionunidadmedicion = ObtenerValor(indicador, "descripcionunidadmedicion");
                        var nombresentido = ObtenerValor(indicador, "nombresentido");
                        var nombrefrecuencia = ObtenerValor(indicador, "nombrefrecuencia");
                        var nombrearticulo = ObtenerValor(indicador, "nombrearticulo");
                        var descripcionliteral = ObtenerValor(indicador, "descripcionliteral");
                        var descripcionnumeral = ObtenerValor(indicador, "descripcionnumeral");
                        var descripcionparagrafo = ObtenerValor(indicador, "descripcionparagrafo");


                        <tr>
                            <td>@id</td>
                            <td>@codigo</td>
                            <td>@nombre</td>
                            <td>@objetivo</td>
                            <td>@alcance</td>
                            <td>@formula</td>
                            <td>@meta</td>
                            <td>@nombretipoindicador</td>
                            <td>@descripcionunidadmedicion</td>
                            <td>@nombresentido</td>
                            <td>@nombrefrecuencia</td>
                            <td>@nombrearticulo</td>
                            <td>@descripcionliteral</td>
                            <td>@descripcionnumeral</td>
                            <td>@descripcionparagrafo</td>
                            <td>
                                 <ModalVer TItem="Dictionary<string, object>" 
                                    Items="represenvisualporindicador"
                                    CampoPrimario="nombre"
                                    Titulo="@($"Represenvisuales del indicador: {nombre}")"
                                    OnVerClick="() => CargarRepresenvisualporindicador(id)" 
                                    IdModal="@($"Represen{id}{nombre.Replace(" ","")}Modal")"/>                                
                            </td>
                            <td>
                                <ModalVer TItem="Dictionary<string, object>" 
                                    Items="responsablesporindicador"
                                    CampoPrimario="nombre"
                                    Titulo="@($"Responsables del indicador: {nombre}")"
                                    OnVerClick="() => CargarResponsablesporindicador(id)" 
                                    IdModal="@($"Responsable{id}{nombre.Replace(" ","")}Modal")"/>
                            </td>
                            <td>
                                <ModalVer TItem="Dictionary<string, object>" 
                                    Items="fuentesporindicador"
                                    CampoPrimario="nombre"
                                    Titulo="@($"Fuentes del indicador: {nombre}")"
                                    OnVerClick="() => CargarFuentesporindicador(id)" 
                                    IdModal="@($"Fuente{id}{nombre.Replace(" ","")}Modal")"/>
                            </td>
                            <td>
                                <ModalVer TItem="Dictionary<string, object>" 
                                    Items="variablesporindicador"
                                    CampoPrimario="nombre"
                                    CampoSecundario="dato"
                                    Titulo="@($"Variables del indicador: {nombre}")"
                                    OnVerClick="() => CargarVariablesporindicador(id)" 
                                    IdModal="@($"Variable{id}{nombre.Replace(" ","")}Modal")"/>
                            </td>
                            <td >
                                <div class="d-flex gap-2 justify-content-center">
                                    <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="@( $"#actualizarModal1{id}{codigo.Replace(" ","")}" )" @onclick="@(async () => {
                                            await ManejarClickEditar();
                                            formularioIndicador.id = id;
                                            formularioIndicador.codigo = codigo;
                                            formularioIndicador.nombre = nombre;
                                            formularioIndicador.objetivo = objetivo;
                                            formularioIndicador.alcance = alcance;
                                            formularioIndicador.formula = formula;
                                            formularioIndicador.meta = meta;
                                            formularioIndicador.fkidtipoindicador = ObtenerValor(indicador, "fkidtipoindicador");
                                            formularioIndicador.fkidunidadmedicion = ObtenerValor(indicador, "fkidunidadmedicion");
                                            formularioIndicador.fkidsentido = ObtenerValor(indicador, "fkidsentido");
                                            formularioIndicador.fkidfrecuencia = ObtenerValor(indicador, "fkidfrecuencia");
                                            formularioIndicador.fkidarticulo = ObtenerValor(indicador, "fkidarticulo");
                                            formularioIndicador.fkidliteral = ObtenerValor(indicador, "fkidliteral");
                                            formularioIndicador.fkidnumeral = ObtenerValor(indicador, "fkidnumeral");
                                            formularioIndicador.fkidparagrafo = ObtenerValor(indicador, "fkidparagrafo");
                                            await CargarRepresenvisualporindicador(id);
                                            await CargarResponsablesporindicador(id);
                                            await CargarFuentesporindicador(id);
                                            await CargarVariablesporindicador(id);
                                         })">
                                        Editar
                                    </button>
                                    <button class="btn btn-danger" @onclick="@( () =>  ManejarClickEliminar(id))">Eliminar</button>
                                </div>
                            </td>
                                        <div class="modal fade" style="text-align: initial;" id="@( $"actualizarModal1{id}{codigo.Replace(" ","")}" )" aria-hidden="true" aria-labelledby="@( $"actualizarModal1{id}{codigo.Replace(" ","")}Label" )" tabindex="-1">
                                            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h1 class="modal-title fs-5" id="@( $"actualizarModal1{id}{codigo.Replace(" ","")}Label" )">Actualizando Indicador @id: Pg. 1</h1>
                                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <div class="mb-3">
                                                            <label for="@($"iptCodigo{id}")" class="form-label">Codigo</label>
                                                            <input type="text" class="form-control" id="@($"iptCodigo{id}")" placeholder="COD 000"
                                                                @bind="@formularioIndicador.codigo" />
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"iptNombre{id}")" class="form-label">Nombre</label>
                                                            <input type="text" class="form-control" id="@($"iptNombre{id}")" placeholder="NPM 000"
                                                                @bind="@formularioIndicador.nombre" />
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"iptObjetivo{id}")" class="form-label">Objetivo</label>
                                                            <input type="text" class="form-control" id="@($"iptObjetivo{id}")" placeholder="Objetivo"
                                                                @bind="@formularioIndicador.objetivo" />
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"iptAlcance{id}")" class="form-label">Alcance</label>
                                                            <input type="text" class="form-control" id="@($"iptAlcance{id}")" placeholder="Alcance"
                                                                @bind="@formularioIndicador.alcance" />
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"iptFormula{id}")" class="form-label">Formula</label>
                                                            <input type="text" class="form-control" id="@($"iptFormula{id}")" placeholder="Formula"
                                                                @bind="@formularioIndicador.formula" />
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"iptMeta{id}")" class="form-label">Meta</label>
                                                            <input type="text" class="form-control" id="@($"iptMeta{id}")" placeholder="Meta"
                                                                @bind="@formularioIndicador.meta" />
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button class="btn btn-primary" data-bs-target="@( $"#actualizarModal2{id}{codigo.Replace(" ","")}" )" data-bs-toggle="modal">Siguiente</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal fade" id="@( $"actualizarModal2{id}{codigo.Replace(" ","")}" )" style="text-align: initial;" aria-hidden="true" aria-labelledby="@( $"actualizarModal2{id}{codigo.Replace(" ","")}Label" )" tabindex="-1">
                                            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h1 class="modal-title fs-5" id="@( $"actualizarModal2{id}{codigo.Replace(" ","")}Label" )">Actualizando Indicador @id: Pg. 2</h1>
                                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <div class="mb-3">
                                                            <label for="@($"sltTipoIndicador{id}")">Seleccione el Tipo de Indicador: </label>
                                                            <select name="@($"sltTipoIndicador{id}")" id="@($"sltTipoIndicador{id}")" class="form-select" @bind="@formularioIndicador.fkidtipoindicador">
                                                                @if (tiposIndicador != null && tiposIndicador.Count > 0)
                                                                {
                                                                    <option value="" disabled selected>Seleccione un Tipo de Indicador</option>
                                                                    foreach (var tipo in tiposIndicador)
                                                                    {
                                                                        var idTipo = ObtenerValor(tipo, "id");
                                                                        var nombreTipo = ObtenerValor(tipo, "nombre");
                                                                        <option value="@idTipo">@nombreTipo</option>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <option value="" disabled selected>No hay Tipo de indicadores disponibles</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"sltUnidadMedicion{id}")">Seleccione la Unidad de Medición: </label>
                                                            <select name="@($"sltUnidadMedicion{id}")" id="@($"sltUnidadMedicion{id}")" class="form-select" @bind="@formularioIndicador.fkidunidadmedicion">
                                                                @if (unidadesMedicion != null && unidadesMedicion.Count > 0)
                                                                {
                                                                    <option value="" disabled selected>Seleccione una Unidad de Medición</option>
                                                                    foreach (var unidad in unidadesMedicion)
                                                                    {
                                                                        var idUnidad = ObtenerValor(unidad, "id");
                                                                        var descripcionUnidad = ObtenerValor(unidad, "descripcion");
                                                                        <option value="@idUnidad">@descripcionUnidad</option>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <option value="" disabled selected>No hay Unidad Medicion disponibles</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"sltSentido{id}")">Seleccione el Sentido: </label>
                                                            <select name="@($"sltSentido{id}")" id="@($"sltSentido{id}")" class="form-select" @bind="@formularioIndicador.fkidsentido">
                                                                @if (sentidos != null && sentidos.Count > 0)
                                                                {
                                                                    <option value="" disabled selected>Seleccione un Sentido</option>
                                                                    foreach (var sentido in sentidos)
                                                                    {
                                                                        var idSentido = ObtenerValor(sentido, "id");
                                                                        var nombreSentido = ObtenerValor(sentido, "nombre");
                                                                        <option value="@idSentido">@nombreSentido</option>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <option value="" disabled selected>No hay Sentidos disponibles</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"sltFrecuencia{id}")">Seleccione la Frecuencia: </label>
                                                            <select name="@($"sltFrecuencia{id}")" id="@($"sltFrecuencia{id}")" class="form-select" @bind="@formularioIndicador.fkidfrecuencia">
                                                                @if (frecuencias != null && frecuencias.Count > 0)
                                                                {
                                                                    <option value="" disabled selected>Seleccione una Frecuencia</option>
                                                                    foreach (var frecuencia in frecuencias)
                                                                    {
                                                                        var idFrecuencia = ObtenerValor(frecuencia, "id");
                                                                        var nombreFrecuencia = ObtenerValor(frecuencia, "nombre");
                                                                        <option value="@idFrecuencia">@nombreFrecuencia</option>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <option value="" disabled selected>No hay Frecuencias disponibles</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"sltArticulo{id}")">Seleccione el Articulo: </label>
                                                            <select name="@($"sltArticulo{id}")" id="@($"sltArticulo{id}")" class="form-select" @bind="@formularioIndicador.fkidarticulo">
                                                                @if (articulos != null && articulos.Count > 0)
                                                                {
                                                                    <option value="" disabled selected>Seleccione un Articulo</option>
                                                                    foreach (var articulo in articulos)
                                                                    {
                                                                        var idArticulo = ObtenerValor(articulo, "id");
                                                                        var nombreArticulo = ObtenerValor(articulo, "nombre");
                                                                        <option value="@idArticulo">@nombreArticulo</option>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <option value="" disabled selected>No hay Articulos disponibles</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"sltLiteral{id}")">Seleccione el Literal: </label>
                                                            <select name="@($"sltLiteral{id}")" id="@($"sltLiteral{id}")" class="form-select" @bind="@formularioIndicador.fkidliteral">
                                                                @if (literales != null && literales.Count > 0)
                                                                {
                                                                    <option value="" disabled selected>Seleccione un Literal</option>
                                                                    foreach (var literal in literales)
                                                                    {
                                                                        var idLiteral = ObtenerValor(literal, "id");
                                                                        var descripcionLiteral = ObtenerValor(literal, "descripcion");
                                                                        <option value="@idLiteral">@descripcionLiteral</option>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <option value="" disabled selected>No hay Literales disponibles</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"sltNumeral{id}")">Seleccione el Numeral: </label>
                                                            <select name="@($"sltNumeral{id}")" id="@($"sltNumeral{id}")" class="form-select" @bind="@formularioIndicador.fkidnumeral">
                                                                @if (numerales != null && numerales.Count > 0)
                                                                {
                                                                    <option value="" disabled selected>Seleccione un Numeral</option>
                                                                    foreach (var numeral in numerales)
                                                                    {
                                                                        var idNumeral = ObtenerValor(numeral, "id");
                                                                        var descripcionNumeral = ObtenerValor(numeral, "descripcion");
                                                                        <option value="@idNumeral">@descripcionNumeral</option>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <option value="" disabled selected>No hay Numerales disponibles</option>
                                                                }
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="@($"sltParagrafo{id}")">Seleccione el Paragrafo: </label>
                                                            <select name="@($"sltParagrafo{id}")" id="@($"sltParagrafo{id}")" class="form-select" @bind="@formularioIndicador.fkidparagrafo">
                                                                @if (paragrafos != null && paragrafos.Count > 0)
                                                                {
                                                                    <option value="" disabled selected>Seleccione un Paragrafo</option>
                                                                    foreach (var paragrafo in paragrafos)
                                                                    {
                                                                        var idParagrafo = ObtenerValor(paragrafo, "id");
                                                                        var descripcionParagrafo = ObtenerValor(paragrafo, "descripcion");
                                                                        <option value="@idParagrafo">@descripcionParagrafo</option>
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <option value="" disabled selected>No hay Paragrafos disponibles</option>
                                                                }
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button class="btn btn-primary" data-bs-target="@( $"#actualizarModal1{id}{codigo.Replace(" ","")}" )" data-bs-toggle="modal">Anterior</button>
                                                        <button class="btn btn-primary" data-bs-target="@( $"#actualizarModal3{id}{codigo.Replace(" ","")}" )" data-bs-toggle="modal">Siguiente</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal fade" id="@( $"actualizarModal3{id}{codigo.Replace(" ","")}" )" style="text-align: initial;" aria-hidden="true" aria-labelledby="@( $"actualizarModal3{id}{codigo.Replace(" ","")}Label" )" tabindex="-1">
                                            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h1 class="modal-title fs-5" id="@( $"actualizarModal3{id}{codigo.Replace(" ","")}Label" )">Actualizando Indicador @id: Pg. 3</h1>
                                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <fieldset class="border p-2 mb-3">
                                                            <legend>Represenvisualporindicador</legend>
                                                            <div class="mb-3 d-flex gap-2 justify-content-center" >
                                                                <select name="@($"sltRepresenvisualporindicador{id}")" id="@($"sltRepresenvisualporindicador{id}")" class="form-select" @bind="@idRepresenIndicadorAgregar">
                                                                    <option value="">Seleccione una Representación</option>
                                                                    @foreach (var rep in represenvisual)
                                                                    {
                                                                        <option value="@ObtenerValor(rep, "id")">
                                                                            @ObtenerValor(rep, "nombre")
                                                                        </option>
                                                                    }
                                                                </select>
                                                                <div class="col-auto">
                                                                    <button type="button" class="btn btn-primary" @onclick="AgregarRepresenvisual">Agregar</button>
                                                                </div>
                                                            </div>
                                                            <ul class="list-group">
                                                                @foreach (var item in represenvisualporindicador)
                                                                {
                                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                                        @ObtenerValor(item,"fkidrepresenvisual") - Nombre: @ObtenerValor(item,"nombre")
                                                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarElementoLista(item, represenvisualporindicador)">Remover</button>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </fieldset>
                                                        <fieldset class="border p-2 mb-3">
                                                            <legend>Responsablesporindicador</legend>
                                                            <div class="mb-3 d-flex gap-2 justify-content-center" >
                                                                <select name="@($"sltResponsablesporindicador{id}")" id="@($"sltResponsablesporindicador{id}")" class="form-select" @bind="@idResponsableAgregar">
                                                                    <option value="">Seleccione un Responsable</option>
                                                                    @foreach (var resp in responsables)
                                                                    {
                                                                        <option value="@ObtenerValor(resp, "id")">
                                                                            @ObtenerValor(resp, "nombre")
                                                                        </option>
                                                                    }
                                                                </select>
                                                                <div class="col-auto">
                                                                    <button type="button" class="btn btn-primary" @onclick="AgregarResponsable">Agregar</button>
                                                                </div>
                                                            </div>
                                                            <ul class="list-group">
                                                                @foreach (var item in responsablesporindicador)
                                                                {
                                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                                        @ObtenerValor(item,"fkidresponsable") - Nombre: @ObtenerValor(item,"nombre")
                                                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarElementoLista(item,responsablesporindicador)">Remover</button>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </fieldset>
                                                        <fieldset class="border p-2 mb-3">
                                                            <legend>Fuentesporindicador</legend>
                                                            <div class="mb-3 d-flex gap-2 justify-content-center" >
                                                                <select name="@($"sltFuentesporindicador{id}")" id="@($"sltFuentesporindicador{id}")" class="form-select" @bind="@idFuenteAgregar">
                                                                    <option value="">Seleccione una Fuente</option>
                                                                    @foreach (var fuen in fuentes)
                                                                    {
                                                                        <option value="@ObtenerValor(fuen, "id")">
                                                                            @ObtenerValor(fuen, "nombre")
                                                                        </option>
                                                                    }
                                                                </select>
                                                                <div class="col-auto">
                                                                    <button type="button" class="btn btn-primary" @onclick="AgregarFuente">Agregar</button>
                                                                </div>
                                                            </div>
                                                            <ul class="list-group">
                                                                @foreach (var item in fuentesporindicador)
                                                                {
                                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                                        @ObtenerValor(item, "fkidfuente") - Nombre: @ObtenerValor(item, "nombre")
                                                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarElementoLista(item,fuentesporindicador)">Remover</button>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </fieldset>
                                                        <fieldset class="border p-2 mb-3">
                                                            <legend>Variablesporindicador</legend>
                                                            <div class="mb-3 d-flex gap-2 justify-content-center" >
                                                                <div class="w-100 d-flex gap-2">
                                                                    <select name="@($"sltVariablesporindicador{id}")" id="@($"sltVariablesporindicador{id}")" class="form-select" @bind="@idVariableAgregar">
                                                                        <option value="">Seleccione una Variable</option>
                                                                        @foreach (var vari in variables)
                                                                        {
                                                                            <option value="@ObtenerValor(vari, "id")">
                                                                                @ObtenerValor(vari, "nombre")
                                                                            </option>
                                                                        }
                                                                    </select>
                                                                    <input type="number" placeholder="Dato" name="@($"iptDatoVariable{id}")" id="@($"iptDatoVariable{id}")" class="form-control" @bind="@datoVariableAgregar" />
                                                                </div>
                                                                <div class="col-auto">
                                                                    <button type="button" class="btn btn-primary" @onclick="AgregarVariable">Agregar</button>
                                                                </div>
                                                            </div>
                                                            <ul class="list-group">
                                                                @foreach (var item in variablesporindicador)
                                                                {
                                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                                        @ObtenerValor(item,"fkidvariable") - Nombre: @ObtenerValor(item,"nombre") = @ObtenerValor(item,"dato")
                                                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => EliminarElementoLista(item,variablesporindicador)">Remover</button>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </fieldset>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button class="btn btn-primary" data-bs-target="@( $"#actualizarModal2{id}{codigo.Replace(" ","")}" )" data-bs-toggle="modal">Anterior</button>
                                                        <button class="btn btn-primary" @onclick="ActualizarIndicador">Actualizar</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if ((indicadores == null || indicadores.Count == 0) && CargarTabla)
    {
        <p>No hay Indicadores disponibles.</p>
    }

}

<!-- Mostrar mensaje de error si existe -->
@if (mensaje != null)
{
    <div class="alert" id="mensajeContainer" >
        @mensaje
    </div>
}

<style>
    #mensajeContainer{
        position: fixed !important;
        top: 13%;
        right: 35%;
        z-index: 9999;
        transition: opacity 0.5s ease-in-out;
        background-color: rgba(255, 115, 0, 0.55);
    }
</style>




@code {

    // Variables para almacenar las listas
    private List<Dictionary<string, object>> indicadores = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> responsablesporindicador = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> fuentesporindicador = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> variablesporindicador = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> represenvisualporindicador = new List<Dictionary<string, object>>();

    private List<Dictionary<string, object>> tiposIndicador = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> unidadesMedicion = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> sentidos = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> frecuencias = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> articulos = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> literales = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> numerales = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> paragrafos = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> represenvisual = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> responsables = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> fuentes = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> variables = new List<Dictionary<string, object>>();

    
    // Variable para almacenar el formulario
    private FormularioIndicador formularioIndicador = new FormularioIndicador();
    // Variable para almacenar mensajes de error
    private string? mensaje = null;

    // Constantes para los parámetros de la API
    private const string PROYECTO = "proyecto";
    private const string TABLA = "indicador";

    // Variable para almacenar el nombre a consultar
    private string nombreConsulta = string.Empty;

    // Variables visibilidad
    private bool Cargando = true;
    private bool CargarTabla = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarIndicadores();
    }

    private class FormularioIndicador
    {
        public string id { get; set; } = "";
        public string codigo { get; set; } = "";
        public string nombre { get; set; } = "";
        public string objetivo { get; set; } = "";
        public string alcance { get; set; } = "";
        public string formula { get; set; } = "";
        public string meta { get; set; } = "";
        public string fkidtipoindicador { get; set; } = "";
        public string fkidunidadmedicion { get; set; } = "";
        public string fkidsentido { get; set; } = "";
        public string fkidfrecuencia { get; set; } = "";
        public string fkidarticulo { get; set; } = "";
        public string fkidliteral { get; set; } = "";
        public string fkidnumeral { get; set; } = "";
        public string fkidparagrafo { get; set; } = "";
    }

    private string idRepresenIndicadorAgregar = "";

    private void AgregarRepresenvisual()
    {
    bool yaExiste = represenvisualporindicador.Any(x =>
        x.TryGetValue("fkidrepresenvisual", out var valor) &&
        valor?.ToString() == idRepresenIndicadorAgregar);
        var rep = represenvisual.FirstOrDefault(x => x.TryGetValue("id", out var id) && id?.ToString() == idRepresenIndicadorAgregar);
        var nombre = rep != null && rep.TryGetValue("nombre", out var nombreObj) ? nombreObj?.ToString() ?? "" : "";

        if (!string.IsNullOrWhiteSpace(idRepresenIndicadorAgregar) && !yaExiste)
        {
            represenvisualporindicador.Add(new Dictionary<string, object>
            {
                { "fkidrepresenvisual", idRepresenIndicadorAgregar },
                { "nombre", nombre },
            });

            idRepresenIndicadorAgregar = "";
        }
    }

    private string idResponsableAgregar = "";

    private void AgregarResponsable()
    {
    bool yaExiste = responsablesporindicador.Any(x =>
        x.TryGetValue("fkidresponsable", out var valor) &&
        valor?.ToString() == idResponsableAgregar);
        var rep = responsables.FirstOrDefault(x => x.TryGetValue("id", out var id) && id?.ToString() == idResponsableAgregar);
        var nombre = rep != null && rep.TryGetValue("nombre", out var nombreObj) ? nombreObj?.ToString() ?? "" : "";

        if (!string.IsNullOrWhiteSpace(idResponsableAgregar) && !yaExiste)
        {
            responsablesporindicador.Add(new Dictionary<string, object>
            {
                { "fkidresponsable", idResponsableAgregar },
                { "nombre", nombre },
            });

            idResponsableAgregar = "";
        }
    }

    private string idFuenteAgregar = "";

    private void AgregarFuente()
    {
    bool yaExiste = fuentesporindicador.Any(x =>
        x.TryGetValue("fkidfuente", out var valor) &&
        valor?.ToString() == idFuenteAgregar);
        var rep = fuentes.FirstOrDefault(x => x.TryGetValue("id", out var id) && id?.ToString() == idFuenteAgregar);
        var nombre = rep != null && rep.TryGetValue("nombre", out var nombreObj) ? nombreObj?.ToString() ?? "" : "";

        if (!string.IsNullOrWhiteSpace(idFuenteAgregar) && !yaExiste)
        {
            fuentesporindicador.Add(new Dictionary<string, object>
            {
                { "fkidfuente", idFuenteAgregar },
                { "nombre", nombre },
            });

            idFuenteAgregar = "";
        }
    }

    private string idVariableAgregar = "";

    private string datoVariableAgregar = "";

    private void AgregarVariable()
    {
    bool yaExiste = variablesporindicador.Any(x =>
        x.TryGetValue("fkidvariable", out var valor) &&
        valor?.ToString() == idVariableAgregar);
        var rep = variables.FirstOrDefault(x => x.TryGetValue("id", out var id) && id?.ToString() == idVariableAgregar);
        var nombre = rep != null && rep.TryGetValue("nombre", out var nombreObj) ? nombreObj?.ToString() ?? "" : "";
        
        if (!string.IsNullOrWhiteSpace(idVariableAgregar) && !yaExiste)
        {
            // Se quema el valor temporalmente
            // Aquí puedes agregar la lógica para obtener el dato de la variable
            var email = "admin@empresa.com";
            variablesporindicador.Add(new Dictionary<string, object>
            {
                { "fkidvariable", idVariableAgregar },
                { "dato", datoVariableAgregar },
                { "fkemailusuario", email },
                { "nombre", nombre }
            });

            idVariableAgregar = "";
            datoVariableAgregar = "";
        }
    }

    private void EliminarElementoLista(Dictionary<string, object> elemento, List<Dictionary<string, object>> lista)
    {
        // Eliminar el elemento de la lista
        lista.Remove(elemento);
    }

    private void ReiniciarFormulariosIndicador(bool omitirIndicador = false){

        if (!omitirIndicador)
        {
            formularioIndicador = new FormularioIndicador();
        }
        represenvisual = new List<Dictionary<string, object>>();
        responsables = new List<Dictionary<string, object>>();
        fuentes = new List<Dictionary<string, object>>();
        variables = new List<Dictionary<string, object>>();
        represenvisualporindicador = new List<Dictionary<string, object>>();
        responsablesporindicador = new List<Dictionary<string, object>>();
        fuentesporindicador = new List<Dictionary<string, object>>();
        variablesporindicador = new List<Dictionary<string, object>>();
    }

    private async Task CargarListas(){
        mensaje = null;
        await CargarTiposIndicador();
        await CargarUnidadesMedicion();
        await CargarSentidos();
        await CargarFrecuencias();
        await CargarArticulos();
        await CargarLiterales();
        await CargarNumerales();
        await CargarParagrafos();
        await CargarRepresenvisual();
        await CargarResponsables();
        await CargarFuentes();
        await CargarVariables();
    }

    private async Task ManejarClickCrear()
    {
        ReiniciarFormulariosIndicador();
        await CargarListas();
        StateHasChanged();
    }

    private async Task ManejarClickEditar(){
        ReiniciarFormulariosIndicador(true);
        await CargarListas();
        StateHasChanged();
    }

    private async void ManejarClickListar()
    {
        mensaje = null;
        ReiniciarFormulariosIndicador();
        await CargarIndicadores();
        StateHasChanged();
    }

    private async void ManejarClickEliminar(string id)
    {
        mensaje = null;
        var confirmar = await JS.InvokeAsync<bool>("confirm", "¿Está seguro de que desea eliminar este Indicador?");
        if (!confirmar)
        {
            return;
        }
        await EliminarIndicador(id);
    }

    private void MostrarMensaje(string mensaje)
    {
        this.mensaje = mensaje;
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            this.mensaje = null;
            await InvokeAsync(StateHasChanged);
        });
        StateHasChanged();
    }

    private async Task CargarIndicadores()
    {
        Cargando = true;
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { {"consulta", "SELECT i.id, i.nombre, i.codigo, i.objetivo, i.alcance, i.formula, i.fkidtipoindicador, i.fkidunidadmedicion, i.meta, i.fkidsentido, i.fkidfrecuencia, i.fkidarticulo, i.fkidliteral, i.fkidnumeral, i.fkidparagrafo, ti.nombre as nombretipoindicador, u.descripcion as descripcionunidadmedicion, s.nombre as nombresentido, f.nombre as nombrefrecuencia, a.nombre as nombrearticulo, l.descripcion as descripcionliteral, n.descripcion as descripcionnumeral, p.descripcion as descripcionparagrafo FROM dbo.indicador i LEFT JOIN dbo.articulo a ON a.id = i.fkidarticulo LEFT JOIN dbo.frecuencia f ON i.fkidfrecuencia = f.id LEFT JOIN dbo.literal l ON l.id = i.fkidliteral AND l.fkidarticulo = i.fkidarticulo LEFT JOIN dbo.numeral n ON n.id = i.fkidnumeral AND n.fkidliteral = i.fkidliteral LEFT JOIN dbo.paragrafo p ON p.id = i.fkidparagrafo AND p.fkidarticulo = i.fkidarticulo LEFT JOIN dbo.sentido s ON s.id = i.fkidsentido LEFT JOIN dbo.tipoindicador ti ON ti.id = i.fkidtipoindicador LEFT JOIN dbo.unidadmedicion u ON u.id = i.fkidunidadmedicion;" } });
            if (resultado != null)
            {
                indicadores = resultado;
            }
            else
            {
                indicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar indicadores: {ex.Message}";
            indicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            Cargando = false;
            CargarTabla = true;
        }
    }

    private async Task CrearIndicador()
    {
        try
        {
            var parametros = new Dictionary<string, object>
            {
                { "codigo", formularioIndicador.codigo },
                { "nombre", formularioIndicador.nombre },
                { "objetivo", formularioIndicador.objetivo },
                { "alcance", formularioIndicador.alcance },
                { "formula", formularioIndicador.formula },
                { "meta", formularioIndicador.meta },
                { "fkidtipoindicador", formularioIndicador.fkidtipoindicador },
                { "fkidunidadmedicion", formularioIndicador.fkidunidadmedicion },
                { "fkidsentido", formularioIndicador.fkidsentido },
                { "fkidfrecuencia", formularioIndicador.fkidfrecuencia },
            };

            if (!string.IsNullOrEmpty(formularioIndicador.fkidarticulo))
            {
                parametros.Add("fkidarticulo", formularioIndicador.fkidarticulo);
            }
            if (!string.IsNullOrEmpty(formularioIndicador.fkidliteral))
            {
                parametros.Add("fkidliteral", formularioIndicador.fkidliteral);
            }
            if (!string.IsNullOrEmpty(formularioIndicador.fkidnumeral))
            {
                parametros.Add("fkidnumeral", formularioIndicador.fkidnumeral);
            }
            if (!string.IsNullOrEmpty(formularioIndicador.fkidparagrafo))
            {
                parametros.Add("fkidparagrafo", formularioIndicador.fkidparagrafo);
            }
            if (represenvisualporindicador != null && represenvisualporindicador.Count > 0)
            {
                parametros.Add("represenvisualporindicador", represenvisualporindicador);
            }
            if (responsablesporindicador != null && responsablesporindicador.Count > 0)
            {
                parametros.Add("responsablesporindicador", responsablesporindicador);
            }
            if (fuentesporindicador != null && fuentesporindicador.Count > 0)
            {
                parametros.Add("fuentesporindicador", fuentesporindicador);
            }
            if (variablesporindicador != null && variablesporindicador.Count > 0)
            {
                parametros.Add("variablesporindicador", variablesporindicador);
            }
            

            var resultado = await servicioEntidad.EjecutarProcedimientoAsync(
            PROYECTO,
            TABLA,
            "insertar_indicador_intermedias",
            parametros
            );
            if (resultado != null && ObtenerValor(resultado[0], "NumeroIndicador") != "0" )
            {
                Console.WriteLine($"Resultado: {ObtenerValor(resultado[0], "Mensaje")}");
                await CargarIndicadores();
                MostrarMensaje("Indicador creado con éxito");
            }
            else
            {
                MostrarMensaje("Error al guardar Indicador");
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al guardar Indicador: {ex.Message}");
            MostrarMensaje("Error al guardar Indicador");
        }
        finally
        {   
            ReiniciarFormulariosIndicador();
            await CerrarModal("crearModal3");
        }
    }

    private async Task ActualizarIndicador(){
        mensaje = null;
        try{
            var parametros = new Dictionary<string, object>
            {
                { "id", formularioIndicador.id },
                { "codigo", formularioIndicador.codigo },
                { "nombre", formularioIndicador.nombre },
                { "objetivo", formularioIndicador.objetivo },
                { "alcance", formularioIndicador.alcance },
                { "formula", formularioIndicador.formula },
                { "meta", formularioIndicador.meta },
                { "fkidtipoindicador", formularioIndicador.fkidtipoindicador },
                { "fkidunidadmedicion", formularioIndicador.fkidunidadmedicion },
                { "fkidsentido", formularioIndicador.fkidsentido },
                { "fkidfrecuencia", formularioIndicador.fkidfrecuencia },
            };

            if (!string.IsNullOrEmpty(formularioIndicador.fkidarticulo))
            {
                parametros.Add("fkidarticulo", formularioIndicador.fkidarticulo);
            }
            if (!string.IsNullOrEmpty(formularioIndicador.fkidliteral))
            {
                parametros.Add("fkidliteral", formularioIndicador.fkidliteral);
            }
            if (!string.IsNullOrEmpty(formularioIndicador.fkidnumeral))
            {
                parametros.Add("fkidnumeral", formularioIndicador.fkidnumeral);
            }
            if (!string.IsNullOrEmpty(formularioIndicador.fkidparagrafo))
            {
                parametros.Add("fkidparagrafo", formularioIndicador.fkidparagrafo);
            }
            if (represenvisualporindicador != null && represenvisualporindicador.Count > 0)
            {
                parametros.Add("represenvisualporindicador", represenvisualporindicador);
            }
            if (responsablesporindicador != null && responsablesporindicador.Count > 0)
            {
                parametros.Add("responsablesporindicador", responsablesporindicador);
            }
            if (fuentesporindicador != null && fuentesporindicador.Count > 0)
            {
                parametros.Add("fuentesporindicador", fuentesporindicador);
            }
            if (variablesporindicador != null && variablesporindicador.Count > 0)
            {
                parametros.Add("variablesporindicador", variablesporindicador);
            }

            var resultado = await servicioEntidad.EjecutarProcedimientoAsync(
            PROYECTO,
            TABLA,
            "actualizar_indicador_intermedias",
            parametros
            );
            if (resultado != null && ObtenerValor(resultado[0], "NumeroIndicador") != "0" )
            {
                Console.WriteLine($"Resultado: {ObtenerValor(resultado[0], "Mensaje")}");
                await CargarIndicadores();
                MostrarMensaje("Indicador actualizado con éxito");
            }
            else
            {
                MostrarMensaje("Error al actualizar Indicador");
            }
                await CerrarModal($"actualizarModal3{formularioIndicador.id}{formularioIndicador.codigo.Replace(" ","")}");
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al actualizar Indicador: {ex.Message}");
            MostrarMensaje("Error al actualizar Indicador");
        }
        finally
        {
            ReiniciarFormulariosIndicador();
        }
    }

    private async Task CerrarModal(string idModal)
    {
        await JS.InvokeVoidAsync("cerrarModalPorId", idModal);
    }

    private async Task EliminarIndicador(string id)
    {
        try
        {
            var resultado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);

            if (resultado)
            {
                await CargarIndicadores();
                formularioIndicador = new FormularioIndicador();
                MostrarMensaje("Indicador eliminado con éxito");
            }
            else
            {
                MostrarMensaje("Error al eliminar Indicador");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar Indicador: {ex.Message}");
            MostrarMensaje("Error al eliminar Indicador");
        }
    }

    private async Task CargarIndicadoresPorNombre(string nombre)
    {
        Cargando = true;
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT i.id, i.nombre, i.codigo, i.objetivo, i.alcance, i.formula, i.fkidtipoindicador, i.fkidunidadmedicion, i.meta, i.fkidsentido, i.fkidfrecuencia, i.fkidarticulo, i.fkidliteral, i.fkidnumeral, i.fkidparagrafo, ti.nombre as nombretipoindicador, u.descripcion as descripcionunidadmedicion, s.nombre as nombresentido, f.nombre as nombrefrecuencia, a.nombre as nombrearticulo, l.descripcion as descripcionliteral, n.descripcion as descripcionnumeral, p.descripcion as descripcionparagrafo FROM dbo.indicador i LEFT JOIN dbo.articulo a ON a.id = i.fkidarticulo LEFT JOIN dbo.frecuencia f ON i.fkidfrecuencia = f.id LEFT JOIN dbo.literal l ON l.id = i.fkidliteral AND l.fkidarticulo = i.fkidarticulo LEFT JOIN dbo.numeral n ON n.id = i.fkidnumeral AND n.fkidliteral = i.fkidliteral LEFT JOIN dbo.paragrafo p ON p.id = i.fkidparagrafo AND p.fkidarticulo = i.fkidarticulo LEFT JOIN dbo.sentido s ON s.id = i.fkidsentido LEFT JOIN dbo.tipoindicador ti ON ti.id = i.fkidtipoindicador LEFT JOIN dbo.unidadmedicion u ON u.id = i.fkidunidadmedicion WHERE i.nombre LIKE '%{nombre}%'" } });
            if (resultado != null)
            {
                indicadores = resultado;
                nombreConsulta = string.Empty;
            }
            else
            {
                indicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar indicadores: {ex.Message}";
            indicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            Cargando = false;
            CargarTabla = true;
        }
    }

    private async Task CargarTiposIndicador()
    {

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "tipoindicador");
            if (resultado != null)
            {
                tiposIndicador = resultado;
            }
            else
            {
                tiposIndicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Tipos de Indicador: {ex.Message}";
        }
    }

    private async Task CargarUnidadesMedicion()
    {

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "unidadmedicion");
            if (resultado != null)
            {
                unidadesMedicion = resultado;
            }
            else
            {
                unidadesMedicion = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Unidades de Medición: {ex.Message}";
        }
    }

    private async Task CargarSentidos()
    {

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "sentido");
            if (resultado != null)
            {
                sentidos = resultado;
            }
            else
            {
                sentidos = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Sentidos: {ex.Message}";
        }
    }

    private async Task CargarFrecuencias()
    {

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "frecuencia");
            if (resultado != null)
            {
                frecuencias = resultado;
            }
            else
            {
                frecuencias = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Frecuencias: {ex.Message}";
        }
    }

    private async Task CargarArticulos()
    {

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "articulo");
            if (resultado != null)
            {
                articulos = resultado;
            }
            else
            {
                articulos = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Articulos: {ex.Message}";
        }
    }

    private async Task CargarLiterales()
    {

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "literal");
            if (resultado != null)
            {
                literales = resultado;
            }
            else
            {
                literales = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Literales: {ex.Message}";
        }
    }

    private async Task CargarNumerales()
    {

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "numeral");
            if (resultado != null)
            {
                numerales = resultado;
            }
            else
            {
                numerales = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Numerales: {ex.Message}";
        }
    }

    private async Task CargarParagrafos()
    {

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "paragrafo");
            if (resultado != null)
            {
                paragrafos = resultado;
            }
            else
            {
                paragrafos = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Paragrafos: {ex.Message}";
        }
    }

    private async Task CargarRepresenvisual()
    {
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "represenvisual");
            if (resultado != null)
            {
                represenvisual = resultado;
            }
            else
            {
                represenvisual = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Represenvisual: {ex.Message}";
        }
    }

    private async Task CargarRepresenvisualporindicador(string id)
    {
        mensaje = null;

        represenvisualporindicador = new List<Dictionary<string, object>>();

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT rv.id AS fkidrepresenvisual, rv.nombre FROM dbo.represenvisualporindicador rvpi INNER JOIN dbo.represenvisual rv ON rv.id = rvpi.fkidrepresenvisual  WHERE rvpi.fkidindicador = {id}" } });
            if (resultado != null)
            {
                represenvisualporindicador = resultado;   
            }
            else
            {
                represenvisualporindicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Represenvisualporindicador: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task CargarResponsables()
    {
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "actor");
            if (resultado != null)
            {
                responsables = resultado;
            }
            else
            {
                responsables = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Responsables: {ex.Message}";
        }
    }

    private async Task CargarResponsablesporindicador(string id)
    {
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT dbo.actor.id AS fkidresponsable, dbo.actor.nombre FROM dbo.actor INNER JOIN dbo.responsablesporindicador ON dbo.actor.id = dbo.responsablesporindicador.fkidresponsable WHERE dbo.responsablesporindicador.fkidindicador = {id}" } });
            if (resultado != null)
            {
                responsablesporindicador = resultado;
            }
            else
            {
                responsablesporindicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Responsablesporindicador: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task CargarFuentes()
    {
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "fuente");
            if (resultado != null)
            {
                fuentes = resultado;
            }
            else
            {
                fuentes = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Fuentes: {ex.Message}";
        }
    }

    private async Task CargarFuentesporindicador(string id)
    {
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT dbo.fuente.id AS fkidfuente, dbo.fuente.nombre FROM dbo.fuente INNER JOIN dbo.fuentesporindicador ON dbo.fuente.id = dbo.fuentesporindicador.fkidfuente WHERE dbo.fuentesporindicador.fkidindicador = {id}" } });
            if (resultado != null)
            {
                fuentesporindicador = resultado;
            }
            else
            {
                fuentesporindicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Fuentesporindicador: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task CargarVariables()
    {
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "variable");
            if (resultado != null)
            {
                variables = resultado;
            }
            else
            {
                variables = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Variables: {ex.Message}";
        }
    }

    private async Task CargarVariablesporindicador(string id)
    {
        mensaje = null;

        try
        {
            var resultado = await servicioEntidad.EjecutarConsultaAsync(PROYECTO, TABLA, new Dictionary<string, object> { { "consulta", $"SELECT dbo.variable.id AS fkidvariable, dbo.variable.nombre, dbo.variablesporindicador.dato FROM dbo.variable INNER JOIN dbo.variablesporindicador ON dbo.variable.id = dbo.variablesporindicador.fkidvariable WHERE dbo.variablesporindicador.fkidindicador = {id}" } });
            if (resultado != null)
            {
                variablesporindicador = resultado;
            }
            else
            {
                variablesporindicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar Variablesporindicador: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {

        if (diccionario == null)
            return string.Empty;

        if (diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }

        return string.Empty;
    }

}