@page "/login"
@using Services
@layout EmptyLayout  
@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    body{
	margin: 0;
	padding: 0;
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 100vh;
	font-family: 'Jost', sans-serif;
	background: linear-gradient(to bottom, #0c0f2c, #3a1d77, #5e35b1);
    }
    .main{
        width: 350px;
        height: 500px;
        background: red;
        overflow: hidden;
        background: url("https://doc-08-2c-docs.googleusercontent.com/docs/securesc/68c90smiglihng9534mvqmq1946dmis5/fo0picsp1nhiucmc0l25s29respgpr4j/1631524275000/03522360960922298374/03522360960922298374/1Sx0jhdpEpnNIydS4rnN4kHSJtU1EyWka?e=view&authuser=0&nonce=gcrocepgbb17m&user=03522360960922298374&hash=tfhgbs86ka6divo3llbvp93mg4csvb38") no-repeat center/ cover;
        border-radius: 10px;
        box-shadow: 5px 20px 50px #000;
    }
    #chk{
        display: none;
    }
    .signup{
        position: relative;
        width:100%;
        height: 100%;
    }
    label{
        color: #fff;
        font-size: 2.3em;
        justify-content: center;
        display: flex;
        margin: 60px;
        font-weight: bold;
        cursor: pointer;
        transition: .5s ease-in-out;
    }
    input{
        width: 60%;
        height: 20px;
        background: #e0dede;
        justify-content: center;
        display: flex;
        margin: 20px auto;
        padding: 10px;
        border: none;
        outline: none;
        border-radius: 5px;
    }
    button{
        width: 60%;
        height: 40px;
        margin: 10px auto;
        justify-content: center;
        display: block;
        color: #fff;
        background: #573b8a;
        font-size: 1em;
        font-weight: bold;
        margin-top: 20px;
        outline: none;
        border: none;
        border-radius: 5px;
        transition: .2s ease-in;
        cursor: pointer;
    }
    button:hover{
        background: #black;
    }
    .login{
        height: 460px;
        background: #eee;
        border-radius: 60% / 10%;
        transform: translateY(-180px);
        transition: .8s ease-in-out;
    }
    .login label{
        color: #573b8a;
        transform: scale(.6);
    }

    #chk:checked ~ .login{
        transform: translateY(-500px);
    }
    #chk:checked ~ .login label{
        transform: scale(1);	
    }
    #chk:checked ~ .signup label{
        transform: scale(.6);
    }

</style>
<div class="main">      
    <input type="checkbox" id="chk" aria-hidden="true">

    <div class="signup">
        <form @onsubmit="CrearUsuario">
            <label for="chk" aria-hidden="true">Crear Usuario</label>
            <input type="email" @bind="NuevoUsuario.Email" placeholder="Email" required>                
            <input type="password" @bind="NuevoUsuario.Password" placeholder="Password" required>
            <input type="password" @bind="NuevoUsuario.ConfPass" placeholder="confirm password" required>
            <button type="submit">Crear</button>
            @if (!string.IsNullOrEmpty(ErrorMensaje))
            {
                <div style="color: red; text-align: center; font-weight: bold; margin-top: 10px;">
                    @ErrorMensaje
                </div>
            }
        </form>
    </div>
    <div class="login">
        <form @onsubmit="IniciarSesion">
            <label for="chk" aria-hidden="true">Loguearse</label>
            <input type="email" @bind="UsuarioLogin.Email" placeholder="Email" required>
            <input type="password" @bind="UsuarioLogin.Password" placeholder="Password" required>
            <button type="submit">Login</button>
            
        </form>            
    </div>
</div>


@code {
    private Usuario NuevoUsuario = new Usuario();
    private Usuario UsuarioLogin = new Usuario();

    private string? ErrorMensaje { get; set; }
    private async Task CrearUsuario()
    {
        try
        {
            if (NuevoUsuario.Password != NuevoUsuario.ConfPass)
            {
                ErrorMensaje = "Las contraseñas no coinciden.";
                return;              
            }
            else
            {
                var response = await Http.PostAsJsonAsync("http://localhost:5178/api/proyecto/usuario", new
                {
                    email = NuevoUsuario.Email,
                    contrasena = NuevoUsuario.Password
                });

                if (response.IsSuccessStatusCode)
                {
                    // Manejar éxito
                    Console.WriteLine("Usuario creado exitosamente.");
                    NavigationManager.NavigateTo("/Home", replace: true);
                }
            }
            
        }
        catch (Exception ex)
        {
            ErrorMensaje = $"Error: {ex.Message}";
        }
    }


    private async Task IniciarSesion()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5178/api/proyecto/usuario/verificar-contrasena", new
            {
                campoUsuario = "email",
                campoContrasena = "contrasena",
                valorUsuario = UsuarioLogin.Email,
                valorContrasena = UsuarioLogin.Password
            });

            if (response.IsSuccessStatusCode)
            {
                // Manejar éxito
                Console.WriteLine("Inicio de sesión exitoso.");
                NavigationManager.NavigateTo("/Home", replace: true);
            }
            else
            {
                // Manejar error
                Console.WriteLine("Error al iniciar sesión.");
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private class Usuario
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
        public string? ConfPass { get; set; }

        
    }
}
